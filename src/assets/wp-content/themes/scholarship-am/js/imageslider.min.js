/**
 * Image Slider
 *
 * @category    jQuery Plugin
 * @license     http://www.opensource.org/licenses/mit-license.html  MIT License
 * @copyright   2014 Daiki Sato
 * @author      Daiki Sato <sato.dik@gmail.com>
 * @link        http://orememo-v2.tumblr.com/
 * @version     1.1.0
 * @since       2014.05.16
 */
! function(e, t, i, s) {
    var n = "imageslider",
        a = {
            slideItems: ".is-item",
            slideContainer: ".is-container",
            slideDistance: 1,
            slideDuration: 1,
            slideEasing: "linear",
            resizable: !1,
            reverse: !1,
            pause: !1
        };

    function l(i, s) {
        var l = this;
        l.element = i, l.settings = e.extend({}, a, s), l._defaults = a, l._name = n, e(t).on("load", function() {
            l.init()
        })
    }

    function r(t, i) {
        t.width();
        var s = 0;
        return i.each(function() {
            s += e(this).width()
        }), s
    }
    l.prototype.init = function() {
        var i = this;
        i.$element = e(i.element), i.$slideContainer = i.$element.find(i.settings.slideContainer), i.$slideItems = i.$element.find(i.settings.slideItems), i.elementW = i.$element.width(), i.slideContainerW = r(i.$slideContainer, i.$slideItems), i.slideItemsLength = i.$slideItems.length, i.$slideContainer.width(i.slideContainerW), i.$element.css("overflow", "hidden"), i.settings.resizable && e(t).on("resize", function() {
            i.resizeContainer()
        }), i.settings.pause && i.$slideContainer.hover(function() {
            i.stopSlide()
        }, function() {
            i.startSlide()
        }), i.resizeContainer()
    }, l.prototype.startSlide = function() {
        var e = this,
            t = e.$slideContainer.find(e.settings.slideItems).eq(0),
            i = e.$slideContainer.find(e.settings.slideItems).eq(e.slideItemsLength - 1),
            s = t.width(),
            n = i.width();
        if (t.is(":animated")) return !1;
        if (e.settings.reverse) {
            if (parseInt(t.css("margin-left"), 10) >= 0) return i.prependTo(e.$slideContainer).css("margin-left", -n), e.startSlide(), !1;
            t.animate({
                marginLeft: parseInt(t.css("margin-left"), 10) + e.settings.slideDistance
            }, e.settings.slideDuration, e.settings.slideEasing, function() {
                e.startSlide()
            })
        } else t.animate({
            marginLeft: parseInt(t.css("margin-left"), 10) - e.settings.slideDistance
        }, e.settings.slideDuration, e.settings.slideEasing, function() {
            Math.abs(parseInt(t.css("margin-left"), 10)) > s && t.appendTo(e.$slideContainer).css("margin-left", 0), e.startSlide()
        })
    }, l.prototype.stopSlide = function() {
        this.$slideItems.stop()
    }, l.prototype.resizeContainer = function() {
        var t = this.$element.width(),
            i = this.slideContainerW;
        this.stopSlide(),
            function(t, i, s, n) {
                i.each(function() {
                    if (n > 2 * s) return !1;
                    var i = e(this).clone().css("margin-left", 0);
                    i.appendTo(t), n += i.width()
                })
            }(this.$slideContainer, this.$slideItems, t, i), this.$slideItems = this.$element.find(this.settings.slideItems), this.slideContainerW = r(this.$slideContainer, this.$slideItems), this.elementW = t, this.$slideContainer.width(this.slideContainerW), this.slideItemsLength = this.$slideItems.length, this.startSlide()
    }, e.fn[n] = function(t) {
        return this.each(function() {
            e.data(this, "plugin_" + n) || e.data(this, "plugin_" + n, new l(this, t))
        }), this
    }
}(jQuery, window, document);